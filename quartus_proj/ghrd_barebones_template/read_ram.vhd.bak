LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- ecris la valeur 55 en ram a la premiere adresse disponible en partage (512 Mo)apt update
-- apt install busybox
-- alias mem='busybox devmem'
-- ## ecriture dans la RAM
-- mem 0x20000000 w 0xAA
-- ## lancer l'execution de la sequence sur le FPGA
-- mem 0xC0000000 w 0x1
-- ## lire la ram a l'adresse 0x20000000
-- mem 0x20000000
-- 0x00000016

ENTITY read_ram IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clk   : IN STD_LOGIC;
        start_process        : IN STD_LOGIC := '0';
        avm_m0_read          : OUT STD_LOGIC;
        avm_m0_address       : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
        avm_m0_waitrequest   : IN STD_LOGIC := '0';
        avm_m0_readdata      : IN STD_LOGIC_VECTOR(255 DOWNTO 0);
        avm_m0_readdatavalid : IN STD_LOGIC := '0';
        out_dataValid        : OUT STD_LOGIC := '0';
        out_data             : OUT STD_LOGIC_VECTOR(255 DOWNTO 0)
		);
END write_ram;

ARCHITECTURE BEHAVIOR OF read_ram IS
 signal avm_m0_read_sig    : std_logic ;
 signal avm_m0_address_sig : std_logic_vector(31  DOWNTO 0) ;
 signal out_dataValid_sig  : std_logic ;
 signal out_data_sig       : std_logic_vector(255  DOWNTO 0) ;
 BEGIN
	process (clk)
	begin
		if (rising_edge(clk)) then
			if (reset = '1') then
				avm_m0_read_sig     <= '0' ;
				avm_m0_address_sig  <= std_logic_vector(to_unsigned(0, 32 )) ;
				out_dataValid_sig   <= '0' ;
				out_data_sig        <= std_logic_vector(to_unsigned(0, 256)) ;
			elsif (start_process = '1') then
				-- demande de lecture
				avm_m0_read_sig <= '1' ;
				avm_m0_address_sig <= std_logic_vector(to_unsigned(536870912, 32 )) ;
			elsif avm_m0_readdatavalid = '1' then
				-- valeur effectivement recue
				out_dataValid_sig <= '1' ;
				out_data_sig      <= avm_m0_readdata ;
			else
				-- attente de valeur recue ou de nouvelle demande a faire
				avm_m0_read_sig     <= '0' ;
				avm_m0_address_sig  <= std_logic_vector(to_unsigned(0, 32 )) ;
				out_dataValid_sig   <= '0' ;
				out_data_sig        <= std_logic_vector(to_unsigned(0, 256)) ;
			end if;
			avm_m0_read    <= avm_m0_read_sig    ;
			avm_m0_address <= avm_m0_address_sig ;
			out_dataValid  <= out_dataValid_sig  ;
			out_data       <= out_data_sig       ;
		end if;
	end process;
END BEHAVIOR;