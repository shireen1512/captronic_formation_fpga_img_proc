-- Copyright (C) 2020  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- Generated by Quartus Prime Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition
-- Created on Sun Apr 10 19:45:29 2022

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY avalon_sdr_vhdl IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        do_read : IN STD_LOGIC := '0';
        avm_m0_waitrequest : IN STD_LOGIC := '0';
        avm_m0_readdatavalid : IN STD_LOGIC := '0';
        avm_m0_readdata : IN STD_LOGIC_VECTOR(255 DOWNTO 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        avm_m0_address : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
        avm_m0_read : OUT STD_LOGIC;
        avm_m0_byteenable : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
        avm_m0_burstcount : OUT STD_LOGIC_VECTOR(10 DOWNTO 0);
        out_data : OUT STD_LOGIC_VECTOR(255 DOWNTO 0)
    );
END avalon_sdr_vhdl;

ARCHITECTURE BEHAVIOR OF avalon_sdr_vhdl IS
    TYPE type_fstate IS (init,read_start,read_end);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
    SIGNAL reg_out_data : STD_LOGIC_VECTOR(255 DOWNTO 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,do_read,avm_m0_waitrequest,avm_m0_readdatavalid,avm_m0_readdata,reg_out_data)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= init;
            reg_out_data <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            avm_m0_address <= "00000000000000000000000000000000";
            avm_m0_read <= '0';
            avm_m0_byteenable <= "00000000000000000000000000000000";
            avm_m0_burstcount <= "00000000000";
            out_data <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        ELSE
            avm_m0_address <= "00000000000000000000000000000000";
            avm_m0_read <= '0';
            avm_m0_byteenable <= "00000000000000000000000000000000";
            avm_m0_burstcount <= "00000000000";
            reg_out_data <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            out_data <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            CASE fstate IS
                WHEN init =>
                    IF ((do_read = '1')) THEN
                        reg_fstate <= read_start;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= init;
                    END IF;

                    avm_m0_read <= '0';

                    avm_m0_byteenable <= "00000000000000000000000000000000";

                    avm_m0_address <= "00000000000000000000000000000000";

                    avm_m0_burstcount <= "00000000000";
                WHEN read_start =>
                    IF ((avm_m0_waitrequest = '0')) THEN
                        reg_fstate <= read_end;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= read_start;
                    END IF;

                    avm_m0_read <= '1';

                    avm_m0_byteenable <= "00000000000000000000000000001111";

                    avm_m0_address <= "00100000000000000000000000000000";

                    avm_m0_burstcount <= "00000000001";
                WHEN read_end =>
                    IF ((avm_m0_readdatavalid = '1')) THEN
                        reg_fstate <= init;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= read_end;
                    END IF;

                    avm_m0_read <= '0';

                    avm_m0_byteenable <= "00000000000000000000000000000000";

                    IF ((avm_m0_readdatavalid = '1')) THEN
                        reg_out_data <= avm_m0_readdata(255 DOWNTO 0);
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_out_data <= "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
                    END IF;

                    avm_m0_address <= "00000000000000000000000000000000";

                    avm_m0_burstcount <= "00000000000";
                WHEN OTHERS => 
                    avm_m0_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
                    avm_m0_read <= 'X';
                    avm_m0_byteenable <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
                    avm_m0_burstcount <= "XXXXXXXXXXX";
                    reg_out_data <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
                    report "Reach undefined state";
            END CASE;
            out_data <= reg_out_data;
        END IF;
    END PROCESS;
END BEHAVIOR;
